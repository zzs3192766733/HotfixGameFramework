//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.test
{ 

public sealed partial class MyTest :  Bright.Config.BeanBase 
{
    public MyTest(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["selfColor"].IsNumber) { throw new SerializationException(); }  SelfColor = (test.Color)_json["selfColor"].AsInt; }
        { if(!_json["self_pos"].IsObject) { throw new SerializationException(); }  SelfPos = test.Vector3.DeserializeVector3(_json["self_pos"]);  }
        { if(!_json["target_pos"].IsObject) { throw new SerializationException(); }  TargetPos = test.Vector3.DeserializeVector3(_json["target_pos"]);  }
        { var __json0 = _json["all_ctrlPersons"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; AllCtrlPersons = new test.Person[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { test.Person __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = test.Person.DeserializePerson(__e0);  }  AllCtrlPersons[__index0++] = __v0; }   }
        { var __json0 = _json["my_list"]; if(!__json0.IsArray) { throw new SerializationException(); } MyList = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  MyList.Add(__v0); }   }
        { var __json0 = _json["my_map"]; if(!__json0.IsArray) { throw new SerializationException(); } MyMap = new System.Collections.Generic.Dictionary<string, int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string _k0;  { if(!__e0[0].IsString) { throw new SerializationException(); }  _k0 = __e0[0]; } int _v0;  { if(!__e0[1].IsNumber) { throw new SerializationException(); }  _v0 = __e0[1]; }  MyMap.Add(_k0, _v0); }   }
        PostInit();
    }

    public MyTest(int id, test.Color selfColor, test.Vector3 self_pos, test.Vector3 target_pos, test.Person[] all_ctrlPersons, System.Collections.Generic.List<int> my_list, System.Collections.Generic.Dictionary<string, int> my_map ) 
    {
        this.Id = id;
        this.SelfColor = selfColor;
        this.SelfPos = self_pos;
        this.TargetPos = target_pos;
        this.AllCtrlPersons = all_ctrlPersons;
        this.MyList = my_list;
        this.MyMap = my_map;
        PostInit();
    }

    public static MyTest DeserializeMyTest(JSONNode _json)
    {
        return new test.MyTest(_json);
    }

    /// <summary>
    /// 编号
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 自身颜色
    /// </summary>
    public test.Color SelfColor { get; private set; }
    /// <summary>
    /// 自身位置
    /// </summary>
    public test.Vector3 SelfPos { get; private set; }
    /// <summary>
    /// 目标位置
    /// </summary>
    public test.Vector3 TargetPos { get; private set; }
    /// <summary>
    /// 全部控制的人
    /// </summary>
    public test.Person[] AllCtrlPersons { get; private set; }
    /// <summary>
    /// 我的list
    /// </summary>
    public System.Collections.Generic.List<int> MyList { get; private set; }
    /// <summary>
    /// 我的map
    /// </summary>
    public System.Collections.Generic.Dictionary<string, int> MyMap { get; private set; }

    public const int __ID__ = -1862961830;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        SelfPos?.Resolve(_tables);
        TargetPos?.Resolve(_tables);
        foreach(var _e in AllCtrlPersons) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        SelfPos?.TranslateText(translator);
        TargetPos?.TranslateText(translator);
        foreach(var _e in AllCtrlPersons) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "SelfColor:" + SelfColor + ","
        + "SelfPos:" + SelfPos + ","
        + "TargetPos:" + TargetPos + ","
        + "AllCtrlPersons:" + Bright.Common.StringUtil.CollectionToString(AllCtrlPersons) + ","
        + "MyList:" + Bright.Common.StringUtil.CollectionToString(MyList) + ","
        + "MyMap:" + Bright.Common.StringUtil.CollectionToString(MyMap) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
